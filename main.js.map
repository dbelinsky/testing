{"version":3,"file":"main.js","mappings":"yBACO,SAASA,EAAyBC,EAASC,GAEhDD,EAAQE,YAAcD,CACxB,CCCO,MAAME,EACXC,WAAAA,GACEC,KAAKC,UAAYC,SAASC,cAAc,UACxCH,KAAKI,kBAAoBF,SAASC,cAAc,uBAChDH,KAAKK,UAAYH,SAASI,iBAAiB,cAE3CN,KAAKO,gBAAkBP,KAAKO,gBAAgBC,KAAKR,MACjDA,KAAKS,aAAeT,KAAKS,aAAaD,KAAKR,KAC7C,CAEAU,iBAAAA,CAAkBC,GAChB,MAAMC,EAAgBD,EAAWE,QAAQ,MAAO,IAEhD,IAAK,cAAcC,KAAKF,GACtB,OAAO,EAGT,MAAMG,EAASC,MAAMC,KAAKL,EAAeM,QAAQC,UAEjD,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAOM,OAAQD,GAAK,EACtCL,EAAOK,IAAM,EACTL,EAAOK,GAAK,IACdL,EAAOK,IAAM,GAIjB,OAAOL,EAAOO,QAAO,CAACC,EAAKC,IAAQD,EAAMC,GAAK,GAAK,IAAO,CAC5D,CAEAC,WAAAA,CAAYd,GACV,MAAMC,EAAgBD,EAAWe,OAAO,EAAG,IACrCC,EAAaf,EAAcgB,OAAO,GAExC,MAAI,KAAKd,KAAKa,GACL,OACE,KAAKb,KAAKa,GACZ,aACE,KAAKb,KAAKa,GACZ,MACE,KAAKb,KAAKa,GACZ,UACE,SAASb,KAAKF,GAChB,mBAEA,SAEX,CAEAH,YAAAA,CAAaoB,GACXA,EAAMC,iBACN,MAAMnB,EAAaX,KAAKC,UAAU8B,MAAMlB,QAAQ,MAAO,IAEvD,GAAIb,KAAKU,kBAAkBC,GAAa,CACtC,MACMf,EAAW,6BADAI,KAAKyB,YAAYd,KAElCjB,EAAyBM,KAAKI,kBAAmBR,EACnD,MACEF,EAAyBM,KAAKI,kBAAmB,iCAErD,CAEA4B,wBAAAA,CAAyBrB,GACvB,MAAMsB,EAAWjC,KAAKyB,YAAYd,GAElCX,KAAKK,UAAU6B,SAASC,IAClBA,EAAKC,UAAUC,SAASJ,GAC1BE,EAAKG,MAAMC,OAAS,mBAEpBJ,EAAKG,MAAMC,OAAS,iBACtB,GAEJ,CAEAhC,eAAAA,GACE,MAAMI,EAAaX,KAAKC,UAAU8B,MAAMlB,QAAQ,MAAO,IAE7B,KAAtBF,EAAW6B,QACbxC,KAAKI,kBAAkBP,YAAc,GACrCG,KAAKK,UAAU6B,SAASC,IACtBA,EAAKG,MAAMC,OAAS,kBAAkB,KAGxCvC,KAAKgC,yBAAyBrB,EAElC,ECvFFT,SAASuC,iBAAiB,oBAAoB,KAC5C,MAAMC,EAAY,IAAI5C,EAEtBI,SAASC,cAAc,UAAUsC,iBAAiB,QAASC,EAAUnC,gBAAgBC,KAAKkC,IAC1FxC,SAASC,cAAc,WAAWsC,iBAAiB,QAASC,EAAUjC,aAAaD,KAAKkC,GAAW,G","sources":["webpack://cards/./src/js/message.js","webpack://cards/./src/js/Validator.js","webpack://cards/./src/js/app.js"],"sourcesContent":["// eslint-disable-next-line import/prefer-default-export\nexport function displayValidationMessage(element, message) {\n  // eslint-disable-next-line no-param-reassign\n  element.textContent = message;\n}\n","/* eslint-disable no-param-reassign */\n/* eslint-disable no-else-return */\nimport { displayValidationMessage } from './message';\n\n// eslint-disable-next-line import/prefer-default-export\nexport class Validator {\n  constructor() {\n    this.cardInput = document.querySelector('.input');\n    this.validationMessage = document.querySelector('.validation-message');\n    this.cardLogos = document.querySelectorAll('.card-logo');\n\n    this.handleCardInput = this.handleCardInput.bind(this);\n    this.validateCard = this.validateCard.bind(this);\n  }\n\n  isValidCardNumber(cardNumber) {\n    const cleanedNumber = cardNumber.replace(/\\s/g, '');\n\n    if (!/^\\d{13,19}$/.test(cleanedNumber)) {\n      return false;\n    }\n\n    const digits = Array.from(cleanedNumber, Number).reverse();\n\n    for (let i = 1; i < digits.length; i += 2) {\n      digits[i] *= 2;\n      if (digits[i] > 9) {\n        digits[i] -= 9;\n      }\n    }\n\n    return digits.reduce((acc, val) => acc + val, 0) % 10 === 0;\n  }\n\n  getCardType(cardNumber) {\n    const cleanedNumber = cardNumber.substr(0, 16);\n    const firstDigit = cleanedNumber.charAt(0);\n\n    if (/^4/.test(firstDigit)) {\n      return 'visa';\n    } else if (/^5/.test(firstDigit)) {\n      return 'mastercard';\n    } else if (/^2/.test(firstDigit)) {\n      return 'mir';\n    } else if (/^6/.test(firstDigit)) {\n      return 'maestro';\n    } else if (/^3[47]/.test(cleanedNumber)) {\n      return 'american_express';\n    } else {\n      return 'Unknown';\n    }\n  }\n\n  validateCard(event) {\n    event.preventDefault();\n    const cardNumber = this.cardInput.value.replace(/\\s/g, '');\n\n    if (this.isValidCardNumber(cardNumber)) {\n      const cardType = this.getCardType(cardNumber);\n      const message = `Карта действительна. Тип: ${cardType}`;\n      displayValidationMessage(this.validationMessage, message);\n    } else {\n      displayValidationMessage(this.validationMessage, 'Invalid card number. Try again');\n    }\n  }\n\n  updateCardLogoVisibility(cardNumber) {\n    const cardType = this.getCardType(cardNumber);\n\n    this.cardLogos.forEach((logo) => {\n      if (logo.classList.contains(cardType)) {\n        logo.style.filter = 'brightness(100%)';\n      } else {\n        logo.style.filter = 'brightness(45%)';\n      }\n    });\n  }\n\n  handleCardInput() {\n    const cardNumber = this.cardInput.value.replace(/\\s/g, '');\n\n    if (cardNumber.trim() === '') {\n      this.validationMessage.textContent = '';\n      this.cardLogos.forEach((logo) => {\n        logo.style.filter = 'brightness(100%)';\n      });\n    } else {\n      this.updateCardLogoVisibility(cardNumber);\n    }\n  }\n}\n","import { Validator } from './Validator';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const validator = new Validator();\n\n  document.querySelector('.input').addEventListener('input', validator.handleCardInput.bind(validator));\n  document.querySelector('.button').addEventListener('click', validator.validateCard.bind(validator));\n});\n"],"names":["displayValidationMessage","element","message","textContent","Validator","constructor","this","cardInput","document","querySelector","validationMessage","cardLogos","querySelectorAll","handleCardInput","bind","validateCard","isValidCardNumber","cardNumber","cleanedNumber","replace","test","digits","Array","from","Number","reverse","i","length","reduce","acc","val","getCardType","substr","firstDigit","charAt","event","preventDefault","value","updateCardLogoVisibility","cardType","forEach","logo","classList","contains","style","filter","trim","addEventListener","validator"],"sourceRoot":""}